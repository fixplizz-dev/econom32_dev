// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  password  String
  role      Role     @default(EDITOR)
  active    Boolean  @default(true)

  // Two-Factor Authentication
  twoFactorEnabled Boolean @default(false)
  twoFactorSecret  String?
  backupCodes      String[] @default([])

  // Security
  lastLoginAt      DateTime?
  lastLoginIp      String?
  failedLoginAttempts Int @default(0)
  lockedUntil      DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  createdNews     News[]   @relation("NewsAuthor")
  createdPages    Page[]   @relation("PageAuthor")
  respondedAppeals Appeal[] @relation("AppealResponder")
  notifications   Notification[]
  loginAttempts   LoginAttempt[]

  @@map("users")
}

model Page {
  id              String   @id @default(cuid())
  slug            String   @unique
  titleRu         String
  titleEn         String?
  contentRu       String
  contentEn       String?
  metaTitleRu     String?
  metaTitleEn     String?
  metaDescriptionRu String?
  metaDescriptionEn String?
  published       Boolean  @default(false)
  publishedAt     DateTime?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  authorId        String

  // Relations
  author          User     @relation("PageAuthor", fields: [authorId], references: [id])

  @@map("pages")
}

model News {
  id          String   @id @default(cuid())
  titleRu     String
  titleEn     String?
  contentRu   String
  contentEn   String?
  excerptRu   String?
  excerptEn   String?
  featuredImage String?
  published   Boolean  @default(false)
  publishedAt DateTime?
  views       Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  authorId    String

  // Relations
  author      User     @relation("NewsAuthor", fields: [authorId], references: [id])

  @@map("news")
}

model Department {
  id          String   @id @default(cuid())
  nameRu      String
  nameEn      String?
  descriptionRu String?
  descriptionEn String?
  parentId    String?
  order       Int      @default(0)
  active      Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  parent      Department?  @relation("DepartmentHierarchy", fields: [parentId], references: [id])
  children    Department[] @relation("DepartmentHierarchy")
  employees   Employee[]
  contacts    Contact[]

  @@map("departments")
}

model Employee {
  id           String   @id @default(cuid())
  firstName    String
  lastName     String
  middleName   String?
  positionRu   String
  positionEn   String?
  photo        String?
  email        String?
  phone        String?
  order        Int      @default(0)
  active       Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  departmentId String

  // Relations
  department   Department @relation(fields: [departmentId], references: [id])

  @@map("employees")
}

model Contact {
  id           String      @id @default(cuid())
  type         ContactType
  value        String
  label        String?
  order        Int         @default(0)
  active       Boolean     @default(true)
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  departmentId String

  // Relations
  department   Department  @relation(fields: [departmentId], references: [id])

  @@map("contacts")
}

model Appeal {
  id           String      @id @default(cuid())
  ticketNumber String      @unique
  firstName    String
  lastName     String
  email        String
  phone        String?
  subject      String
  message      String
  attachments  String[]    @default([])
  status       AppealStatus @default(NEW)
  response     String?
  respondedAt  DateTime?
  respondedBy  String?
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  // Relations
  responder    User?       @relation("AppealResponder", fields: [respondedBy], references: [id])

  @@map("appeals")
}

model Banner {
  id          String   @id @default(cuid())
  titleRu     String
  titleEn     String?
  descriptionRu String?
  descriptionEn String?
  image       String?
  link        String?
  position    Int      @default(0)
  active      Boolean  @default(true)
  startDate   DateTime?
  endDate     DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("banners")
}

model File {
  id        String   @id @default(cuid())
  filename  String
  originalName String
  mimeType  String
  size      Int
  path      String
  bucket    String   @default("econom32-files")
  scanned   Boolean  @default(false)
  safe      Boolean  @default(false)
  scanResult String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("files")
}

model Notification {
  id        String             @id @default(cuid())
  userId    String
  type      NotificationType
  title     String
  message   String
  data      String?            // JSON data
  priority  NotificationPriority @default(MEDIUM)
  read      Boolean            @default(false)
  readAt    DateTime?
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt

  // Relations
  user      User               @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

model Visit {
  id        String   @id @default(cuid())
  ip        String
  userAgent String
  page      String
  referrer  String?
  timestamp DateTime @default(now())

  @@map("visits")
  @@index([timestamp])
  @@index([page])
  @@index([ip])
}

model LoginAttempt {
  id        String   @id @default(cuid())
  userId    String?
  email     String
  ip        String
  userAgent String
  success   Boolean
  reason    String?  // Failed reason: wrong_password, account_locked, etc.
  timestamp DateTime @default(now())

  // Relations
  user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("login_attempts")
  @@index([email, timestamp])
  @@index([ip, timestamp])
}

enum Role {
  ADMIN
  EDITOR
  MODERATOR
}

enum ContactType {
  PHONE
  EMAIL
  ADDRESS
  WEBSITE
  FAX
}

enum AppealStatus {
  NEW
  IN_PROGRESS
  ANSWERED
  CLOSED
}

enum NotificationType {
  NEW_APPEAL
  APPEAL_UPDATED
  NEW_COMMENT
  SYSTEM_ALERT
  BACKUP_SUCCESS
  BACKUP_FAILED
  SECURITY_ALERT
  NEWS_PUBLISHED
}

enum NotificationPriority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}